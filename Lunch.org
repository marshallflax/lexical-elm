* Elm Lunch-and-Learn -- http://github.com:marshallflax/lexical-elm
** What is Elm?
*** Functional language that compiles to Javascript on the browser
*** Efficient language-enforced Model/View/Controller framework
*** Very strongly typed
**** ClassCastException impossible
**** NullPointerException impossible
**** Generics typesafe
**** Missing "case" statement in "switch" impossible
**** Actually-strong typing enables "semantic versioning"
***** Major.minor.patch
***** If the API provided by a package is unchanged, bump the "patch"
***** If the API is increased, bump the "minor"
***** If an existing interface is changed, bump the "major"
**** Subset of Haskell, but without higher-order types
*** Data-oriented, not object-oriented
** What is a functional programming language?
*** In a functional language all data is *immutable*
**** Managing state is always the hard part
***** Common bug: thread-safety
***** Common bug: display after incremental updates doesn't match refresh
***** Common bug: object A references object B, which changes unexpectedly
**** OO restricts who can modify state, but:
***** Thread-safety is very hard
***** Observing an object is error-prone
***** No language-level support for immutable objects
*** Functional languages there are no "variables", only new "final" values
*** No confusion between ":=" and "=" or between "=" and "=="
*** Elm architecture based on three functions
**** modifiedState = f(currentState, commandToBeProcessed)
**** view = f(state)
**** command = broswer(view)
** Q: But how can this work? A: _Persistent Data Structures_
*** Classic example is the singly-linked list
**** The empty list [] is immutable
**** Prepending -- "a" :: [] -- creates a new immutable list of length 1
**** Prepending again -- "b" :: ("a" :: []) creates a new list of len 2
**** I can prepend "c" to ["b" "a"] and you can prepend "d" to ["b" "a"]
**** Utterly thread-safe ... only the Javascript-level GC has to be correct
*** Also: Sets, Maps, Arrays
**** Very smart algorithms behind the scenes
***** Inserting into a heap involves moving around unchanged subtrees
***** Since related datastructures share most data, comparison can be *fast*
**** Map/Reduce approach to processing data yields hotspot-friendly code
** Q: But how can this work? A: _Algebraic Data Structures_
*** Classic example: Maybe d = Just d | Nothing
**** (Maybe String) is *either*
***** (Just String) -- i.e. (Just "Hello World!"), _or_
***** (Nothing) -- i.e. we have no data
**** Every code that processes a "Maybe" *must* handle both cases
**** NullPointerExceptions impossible
*** SessionCommand = LoginCommand String String | LogoutCommand
** Q: But how can this work? A: Records
*** info = {a: 2, b: 23, c: "Hello"}; info2 = {info | b = 4}
*** Type system is smart..deduces {a: Int, b: Int, c: String}
**** But explicit declarations will help you when you're confused
**** Sometimes hard to get code to compile, since type system has no humor
***** But hard to write bugs that pass the compiler...a fair trade!!!
** Structuring a program
*** Main: [[file:src/Main.elm][Main.elm]] : initial_state, updating_state, view, subscriptions
*** Types: [[file:src/Types.elm][Types.elm]] : Model contains state; Msg is ADT of commands
