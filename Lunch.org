* Elm Lunch-and-Learn -- [[https://github.com/marshallflax/lexical-elm/][https://github.com/marshallflax/lexical-elm/]]
** What is [[http://elm-lang.org/][Elm]]?
*** [[https://en.wikipedia.org/wiki/Functional_reactive_programming][Functional Reactive Programming]]
*** Pure-function -- no side effects ever -- language that compiles to Javascript on the browser
*** Efficient language-enforced Model/View/Controller framework
*** Very strongly typed
**** ClassCastException impossible
**** NullPointerException impossible
**** Generics typesafe
**** Missing "case" statement in "switch" impossible
**** Actually-strong typing enables "semantic versioning"
***** Major.minor.patch
***** If the API provided by a package is unchanged, bump the "patch"
***** If the API is increased, bump the "minor"
***** If an existing interface is changed, bump the "major"
**** Subset of Haskell, but without higher-order types
** What is a functional programming language?
*** In a functional language all data is *immutable*
**** Managing state is always the hard part
***** Common bug: thread-safety
***** Common bug: display after incremental updates doesn't match refresh
***** Common bug: object A references object B, which changes unexpectedly (from A's POV)
**** OO restricts who can modify state, but:
***** Thread-safety is hard
***** Observing an object is error-prone
***** No language-level support for immutable objects
*** Functional languages there are no "variables", only new "final" values
*** No confusion between ":=" and "=" or between "=" and "==".  No confusion between final and immutable
** What is a reactive framework?
*** Elm architecture based on three functions
**** command + current_model => new_model + [new_commands]
**** model => view
**** view => [new_commands]
** Q: But how can this work? [[https://en.wikipedia.org/wiki/Persistent_data_structure][Persistent Data Structures]]
***
** Q: But how can this work? [[https://en.wikipedia.org/wiki/Algebraic_data_type][Algebraic Data Types]]
** Q: But how can this work? A: Records
*** info = {a: 2, b: 23, c: "Hello"}; info2 = {info | b = 4}
*** Type system is smart..deduces {a: Int, b: Int, c: String}
**** But explicit declarations will help you when you're confused
**** Sometimes hard to get code to compile, since type system has no humor
***** But hard to write bugs that pass the compiler...a fair trade!!!
** Structuring a program
*** Main: [[file:src/Main.elm][Main.elm]] : initial_model, updating_model, view, subscriptions
*** Types: [[file:src/Types.elm][Types.elm]] : Model contains state; Msg is ADT of commands
*** Controller: [[file:src/State.elm][State.elm]] : How command create a new model from old model
*** View: [[file:src/View.elm][View.elm]] : How to construct HTML from the model
*** Component: [[file:src/FreqInfo.elm][FreqInfo.elm]] : Business logic for some analytics
*** ComponentDisplay: [[file:src/FreqInfoView.elm][FreqInfoView.elm]] : How to render above analytics
*** AnotherComponent: [[file:src/ColoredWord.elm][ColoredWord.elm]] : Splitting into words and colors
*** AnotherDisplay: [[file:src/ColoredWordView.elm][ColoredWordView.elm]] : Rendering the above
